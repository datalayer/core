name: Desktop - Build

on:
  push:
    branches: [ main ]
    tags:
      - 'desktop-v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - dev-prod

concurrency:
  group: desktop-build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  desktop-build:
    name: Desktop - Build ${{ matrix.platform }} (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            platform: linux
            arch: x64
            
          # Windows
          - os: windows-latest
            platform: win
            arch: x64
            
          # macOS Universal (Intel + Apple Silicon)
          - os: macos-latest
            platform: mac
            arch: universal
            
          # macOS Intel only
          - os: macos-13
            platform: mac
            arch: x64
            
          # macOS Apple Silicon only  
          - os: macos-latest
            platform: mac
            arch: arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install root dependencies
        run: npm install

      - name: Build core library
        run: npm run build:lib

      - name: Install Electron app dependencies
        working-directory: examples/electron
        run: npm install

      # Linux Build
      - name: Desktop - Build for Linux
        if: matrix.platform == 'linux'
        working-directory: examples/electron
        run: |
          if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
            npm run dist:dev-prod:linux
          else
            npm run dist:linux
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Desktop - Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-linux-${{ matrix.arch }}
          path: |
            examples/electron/dist-electron/*.AppImage
            examples/electron/dist-electron/*.deb
            examples/electron/dist-electron/*.rpm
            examples/electron/dist-electron/*.snap
          retention-days: 30

      # Windows Build
      - name: Desktop - Build for Windows
        if: matrix.platform == 'win'
        working-directory: examples/electron
        shell: bash
        run: |
          if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
            npm run dist:dev-prod:win
          else
            npm run dist:win
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Desktop - Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-win-${{ matrix.arch }}
          path: |
            examples/electron/dist-electron/*.exe
            examples/electron/dist-electron/*.msi
          retention-days: 30

      # macOS Build
      - name: Desktop - Build for macOS
        if: matrix.platform == 'mac'
        working-directory: examples/electron
        run: |
          # Import certificates if available (for signing)
          if [ -n "${{ secrets.MACOS_CERTIFICATE }}" ]; then
            echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
            security create-keychain -p actions build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p actions build.keychain
            security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PWD }}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
            rm certificate.p12
          fi

          # Build based on architecture and build type
          if [ "${{ matrix.arch }}" = "universal" ]; then
            if [ "${{ github.event.inputs.build_type }}" = "dev-prod" ]; then
              npm run dist:dev-prod:mac
            else
              npm run dist:mac-universal
            fi
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run dist:mac-arm
          else
            npm run dist:mac-intel
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Desktop - Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: datalayer-desktop-mac-${{ matrix.arch }}
          path: |
            examples/electron/dist-electron/*.dmg
            examples/electron/dist-electron/*.zip
            examples/electron/dist-electron/*.pkg
          retention-days: 30

      # Upload build logs on failure
      - name: Desktop - Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-build-logs-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            examples/electron/npm-debug.log
            examples/electron/dist-electron/builder-debug.yml
            examples/electron/dist-electron/builder-effective-config.yaml
          retention-days: 7

  desktop-test-artifacts:
    name: Desktop - Test Artifacts
    needs: desktop-build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts structure
        run: |
          echo "Desktop - Artifact Structure:"
          find artifacts -type f -name "*.AppImage" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" | head -20

      - name: Check artifact sizes
        run: |
          echo "Desktop - Artifact Sizes:"
          find artifacts -type f \( -name "*.AppImage" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" \) -exec ls -lh {} \;
