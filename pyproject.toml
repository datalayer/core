# Copyright (c) 2023-2025 Datalayer, Inc.
# Distributed under the terms of the Modified BSD License.

[build-system]
requires = ["hatchling==1.21.1"]
build-backend = "hatchling.build"

[project]
name = "datalayer_core"
description="Datalayer Core"
keywords = []
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9"
classifiers = [
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
# TODO Unpin keyring https://github.com/datalayer/core/issues/36
dependencies = [
    "jupyter-kernel-client",
    "jupyter-nbmodel-client",
    "jupyter-console",
    "jupyter_server>=2.10,<3",
    "keyring==23.0.1",
    "questionary",
    "requests",
    "pydantic",
    "rich",
    "traitlets",
    "typer",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/datalayer/core"
Documentation = "https://core.datalayer.tech"
Repository = "https://github.com/datalayer/core"
Issues = "https://github.com/datalayer/core/issues"
Changelog = "https://github.com/datalayer/core/blob/main/CHANGELOG.md"

[project.optional-dependencies]
test = [
    "coverage",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest_jupyter",
    "pytest-tornasync",
    "python-dotenv",
    "types-requests",
    "typing-extensions",
]
docs = [
    "click<=8.2.1",  # 8.2.2 is broken https://github.com/pallets/click/issues/3024
    "npdoc_to_md",
    "pydoc-markdown",
]
examples = [
    "fastapi",
    "pydantic",
    "scikit-learn",
    "streamlit",
    "torch",
    "uvicorn",
]

[project.scripts]
d = "datalayer_core.cli.__main__:main"
dla = "datalayer_core.cli.__main__:main"
datalayer = "datalayer_core.cli.__main__:main"
d0 = "datalayer_core.cliapp.datalayer:main"
datalayer-config = "datalayer_core.config:main"
datalayer-migrate = "datalayer_core.migrate:main"
datalayer-server = "datalayer_core.serverapplication:main"
datalayer-troubleshoot = "datalayer_core.troubleshoot:main"

[tool.hatch.version]
path = "datalayer_core/__version__.py"

[tool.hatch.build.targets.sdist]
artifacts = [
    "datalayer_core/assets/about.md",
]
exclude = [".github", "binder"]

[tool.hatch.build.targets.wheel]
artifacts = [
    "datalayer_core/assets/about.md",
]

[tool.hatch.build.targets.wheel.shared-data]
"jupyter-config/server-config" = "etc/jupyter/jupyter_server_config.d"
"jupyter-config/nb-config" = "etc/jupyter/jupyter_notebook_config.d"

[tool.hatch.build.hooks.version]
path = "datalayer_core/_version.py"

[tool.jupyter-releaser.options]
version_cmd = "hatch version"

[tool.mypy]
follow_imports = "skip"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_any_generics = true
warn_unused_ignores = true

[tool.ruff.lint]
extend-select = ["I"]

[tool.poetry]
version = "0.1.0"

[tool.numpydoc_validation]
checks = [
    "all",   # report on all checks, except the below
    "EX01",
    "SA01",
    "ES01",
]

exclude = [  # don't report on objects that match any of these regex
    '\.undocumented_method$',
    '\.__repr__$',
    '\.test_.*$',
]

exclude_files = [ # don't process filepaths that match these regex
    '^test_.*.py$',
]

[tool.pydoc-markdown]
loaders = [
    { type = "python", search_path = ["datalayer_core"] }
]

processors = [
    { type = "filter", skip_empty_modules = false },
    { type = "smart" },
    { type = "crossref" },
    { type = "datalayer_core.pydoc.ReplaceProcessor" }
]

[tool.pydoc-markdown.renderer]
type = "datalayer_core.pydoc.MyDocusaurusRenderer"
docs_base_path = "docs/docs"
relative_output_path = "python_api"
relative_sidebar_path = "sidebar.json"
sidebar_top_level_label = ""

[tool.bandit]
exclude_dirs = ["tests"]
skips = [
    "B101",  # Assert statements are acceptable in this codebase
    "B105",  # Hardcoded password strings - these are configuration keys, not actual passwords
    "B106",  # Hardcoded password funcarg - false positive for empty default values
    "B110",  # Try/except pass is acceptable for error handling
    "B404",  # Subprocess import is needed for legitimate process management
    "B603",  # Subprocess calls are controlled and necessary for CLI operations
    "B606",  # Process execution without shell is safer and intentional
    "B607",  # Partial path execution is acceptable for known binaries
]
